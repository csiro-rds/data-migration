/*
 * Scripts for deploying CSIRO CMS Data Migration Scripts.
 *
 * NB: This script is conditionally applied. Any new tasks will need to be included in the conditions in build.gradle.
 *
 * Usage: gradle migrateSample
 */

// Make sure the required params are supplied. This is generally done by the CI job's
// "Properties Content" field with a prefix of ORG_GRADLE_PROJECT_
// e.g.  ORG_GRADLE_PROJECT_deployuser=auser
// or they can be added locally to your gradle.properties
assert project.hasProperty('deployuser'), 'Properties for deployment must be provided'
assert project.hasProperty('deploypassword'), 'Properties for deployment must be provided'
assert System.env.BUILD_NUMBER, 'Deploying must be done by the appropriate Jenkins job'
assert project.hasProperty('remoteHost'), 'The remote host for the deployment must be specified'
assert project.hasProperty('appUser'), 'The application user name must be specified'
assert project.hasProperty('targetEnv'), 'The name of the target environment must be specified'

// Ssh settings
ssh {
  knownHosts = allowAnyHosts    // Disable host key verification
}

// Define the remote server we are interacting with.
remotes {
    targetServer {
        host = remoteHost
        user = deployuser
        password = deploypassword
    }
}

def migrationRemoteBaseDir = '/srv/cms/deployment/data-migration'
def collectiveaccessHome = '/srv/www/providence'

def asUser = "sudo -u ${appUser}"
task migrateSample(type: SshTask) {
    description 'Run Sample Data Migration Scripts to the required server. Intended for use by the Jenkins only.'
    group 'Continuous Delivery'

    doFirst {
        println "Running Sample Data Migration ${project.version} to server ${remotes.targetServer.host}"
    }

    // Note: Each sudo command here must be specifically allowed in the remote host sudoers config.
    session(remotes.targetServer) {

        println "Restarting MySQL"
        println('sudo service mysql restart; MAXTRIES=120;COUNTER=0; UP=$(pgrep mysqld | wc -l); until [ $COUNTER -ge 120 ] || [ $UP -ge 1 ]; do echo "MySQL has not started yet. ($COUNTER / $MAXTRIES)"; let UP=$(pgrep mysqld | wc -l); let COUNTER+=1; sleep 1; done; if [ $UP -ge 1 ]; then echo MySQL successfully started.; else echo MySQL failed to start; exit 1; fi')
        execute('sudo service mysql restart; MAXTRIES=120;COUNTER=0; UP=$(pgrep mysqld | wc -l); until [ $COUNTER -ge 120 ] || [ $UP -ge 1 ]; do echo "MySQL has not started yet. ($COUNTER / $MAXTRIES)"; let UP=$(pgrep mysqld | wc -l); let COUNTER+=1; sleep 1; done; if [ $UP -ge 1 ]; then echo MySQL successfully started.; else echo MySQL failed to start; exit 1; fi')

        println "Running Database Migration"
        println("${asUser} sh -c 'export COLLECTIVEACCESS_HOME=\"${collectiveaccessHome}\" && cd  \"${migrationRemoteBaseDir}\" &&  bin/migrate -vvv all:sample'")
        execute("${asUser} sh -c 'export COLLECTIVEACCESS_HOME=\"${collectiveaccessHome}\" && cd  \"${migrationRemoteBaseDir}\" &&  bin/migrate -vvv all:sample'")
    }
}
task migrateAll(type: SshTask) {
    description 'Run Data Migration Scripts to the required server. Intended for use by the Jenkins deploy jobs only.'
    group 'Continuous Delivery'

    doFirst {
        println "Running migration CMS Data Migration ${project.version} to server ${remotes.targetServer.host}"
    }

    // Note: Each sudo command here must be specifically allowed in the remote host sudoers config.
    session(remotes.targetServer) {
        println "Running Full Database Migration"
        println("${asUser} sh -c 'export COLLECTIVEACCESS_HOME=\"${collectiveaccessHome}\" && cd  \"${migrationRemoteBaseDir}\" &&  bin/migrate -vvv all'")
        execute("${asUser} sh -c 'export COLLECTIVEACCESS_HOME=\"${collectiveaccessHome}\" && cd  \"${migrationRemoteBaseDir}\" &&  bin/migrate -vvv all'")
    }
}
